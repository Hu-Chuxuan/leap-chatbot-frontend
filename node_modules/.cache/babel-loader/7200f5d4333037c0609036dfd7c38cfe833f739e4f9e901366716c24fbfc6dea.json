{"ast":null,"code":"var _jsxFileName = \"/Users/chuxuanhu/Documents/Fall2023/CS598/legal-service/chat-tool/my-react-app/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [messages, setMessages] = useState([]);\n//   const [backendOutputs, setBackendOutputs] = useState([]);\n\n//   const handleSendMessage = (message) => {\n//     fetch('/display_chat', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify({ input: message })\n//     })\n//     .then(response => response.json())\n//     .then(data => {\n//       data.messages.forEach((output) => {\n//         if (output.startsWith(\"**********\")) {\n//           setMessages(prev => [...prev, { text: output, from: 'bot' }]);\n//         } else {\n//           setBackendOutputs(prev => [...prev, output]);\n//         }\n//       });\n//     })\n//     .catch(error => console.error('Error:', error));\n//   };\n\n//   const handleMessageInput = event => {\n//     if (event.key === 'Enter' && event.target.value.trim() !== '') {\n//       const newMessage = event.target.value;\n//       setMessages(prev => [...prev, { text: newMessage, from: 'user' }]);\n//       handleSendMessage(newMessage);\n//       event.target.value = '';  // Clear input after sending\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <div className=\"grid-container\">\n//         <div className=\"chat-section\">\n//           <header className=\"App-header\">\n//             <ul>\n//               {messages.map((msg, index) => (\n//                 <li key={index} style={{ textAlign: msg.from === 'user' ? 'right' : 'left' }}>\n//                   {msg.text}\n//                 </li>\n//               ))}\n//             </ul>\n//             <input type=\"text\" onKeyDown={handleMessageInput} placeholder=\"Type a message...\" />\n//           </header>\n//         </div>\n//         <div className=\"output-section\">\n//           <h2>Backend Execution Output:</h2>\n//           <pre>\n//             {backendOutputs.map((output, index) => (\n//               <div key={index}>{output}</div>\n//             ))}\n//           </pre>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [backendOutputs, setBackendOutputs] = useState([]);\n  useEffect(() => {\n    // Establish the connection to the server for real-time updates\n    const eventSource = new EventSource('/display_chat');\n    eventSource.onmessage = event => {\n      const output = event.data;\n      // Update frontend based on content, for example:\n      if (output.startsWith(\"**********\")) {\n        setMessages(prev => [...prev, {\n          text: output,\n          from: 'bot'\n        }]);\n      } else {\n        setBackendOutputs(prev => [...prev, output]);\n      }\n    };\n    eventSource.onerror = error => {\n      console.error('EventSource failed:', error);\n      eventSource.close();\n    };\n\n    // Cleanup the event source when the component unmounts\n    return () => {\n      eventSource.close();\n    };\n  }, []);\n  const handleSendMessage = message => {\n    // Start the process and expect to handle outputs via SSE\n    fetch('/display_chat', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        input: message\n      })\n    }).then(response => {\n      // You might handle initial setup or errors here\n      if (!response.ok) {\n        console.error(\"Failed to initiate the process.\");\n      }\n    }).catch(error => console.error('Error:', error));\n  };\n  const handleMessageInput = event => {\n    if (event.key === 'Enter' && event.target.value.trim() !== '') {\n      const newMessage = event.target.value;\n      setMessages(prev => [...prev, {\n        text: newMessage,\n        from: 'user'\n      }]);\n      handleSendMessage(newMessage);\n      event.target.value = ''; // Clear input after sending\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-section\",\n        children: /*#__PURE__*/_jsxDEV(\"header\", {\n          className: \"App-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n            children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              style: {\n                textAlign: msg.from === 'user' ? 'right' : 'left'\n              },\n              children: msg.text\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            onKeyDown: handleMessageInput,\n            placeholder: \"Type a message...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"output-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Backend Execution Output:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: backendOutputs.map((output, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: output\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"4AgOO3mc7CnjjeCwKyTK+bEsEgw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","messages","setMessages","backendOutputs","setBackendOutputs","eventSource","EventSource","onmessage","event","output","data","startsWith","prev","text","from","onerror","error","console","close","handleSendMessage","message","fetch","method","headers","body","JSON","stringify","input","then","response","ok","catch","handleMessageInput","key","target","value","trim","newMessage","className","children","map","msg","index","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","type","onKeyDown","placeholder","_c","$RefreshReg$"],"sources":["/Users/chuxuanhu/Documents/Fall2023/CS598/legal-service/chat-tool/my-react-app/src/App.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [messages, setMessages] = useState([]);\n//   const [backendOutputs, setBackendOutputs] = useState([]);\n\n//   const handleSendMessage = (message) => {\n//     fetch('/display_chat', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify({ input: message })\n//     })\n//     .then(response => response.json())\n//     .then(data => {\n//       data.messages.forEach((output) => {\n//         if (output.startsWith(\"**********\")) {\n//           setMessages(prev => [...prev, { text: output, from: 'bot' }]);\n//         } else {\n//           setBackendOutputs(prev => [...prev, output]);\n//         }\n//       });\n//     })\n//     .catch(error => console.error('Error:', error));\n//   };\n\n//   const handleMessageInput = event => {\n//     if (event.key === 'Enter' && event.target.value.trim() !== '') {\n//       const newMessage = event.target.value;\n//       setMessages(prev => [...prev, { text: newMessage, from: 'user' }]);\n//       handleSendMessage(newMessage);\n//       event.target.value = '';  // Clear input after sending\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <div className=\"grid-container\">\n//         <div className=\"chat-section\">\n//           <header className=\"App-header\">\n//             <ul>\n//               {messages.map((msg, index) => (\n//                 <li key={index} style={{ textAlign: msg.from === 'user' ? 'right' : 'left' }}>\n//                   {msg.text}\n//                 </li>\n//               ))}\n//             </ul>\n//             <input type=\"text\" onKeyDown={handleMessageInput} placeholder=\"Type a message...\" />\n//           </header>\n//         </div>\n//         <div className=\"output-section\">\n//           <h2>Backend Execution Output:</h2>\n//           <pre>\n//             {backendOutputs.map((output, index) => (\n//               <div key={index}>{output}</div>\n//             ))}\n//           </pre>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [backendOutputs, setBackendOutputs] = useState([]);\n\n  useEffect(() => {\n    // Establish the connection to the server for real-time updates\n    const eventSource = new EventSource('/display_chat');\n\n    eventSource.onmessage = event => {\n      const output = event.data;\n      // Update frontend based on content, for example:\n      if (output.startsWith(\"**********\")) {\n        setMessages(prev => [...prev, { text: output, from: 'bot' }]);\n      } else {\n        setBackendOutputs(prev => [...prev, output]);\n      }\n    };\n\n    eventSource.onerror = error => {\n      console.error('EventSource failed:', error);\n      eventSource.close();\n    };\n\n    // Cleanup the event source when the component unmounts\n    return () => {\n      eventSource.close();\n    };\n  }, []);\n\n  const handleSendMessage = (message) => {\n    // Start the process and expect to handle outputs via SSE\n    fetch('/display_chat', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ input: message })\n    }).then(response => {\n      // You might handle initial setup or errors here\n      if (!response.ok) {\n        console.error(\"Failed to initiate the process.\");\n      }\n    }).catch(error => console.error('Error:', error));\n  };\n\n  const handleMessageInput = event => {\n    if (event.key === 'Enter' && event.target.value.trim() !== '') {\n      const newMessage = event.target.value;\n      setMessages(prev => [...prev, { text: newMessage, from: 'user' }]);\n      handleSendMessage(newMessage);\n      event.target.value = '';  // Clear input after sending\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"grid-container\">\n        <div className=\"chat-section\">\n          <header className=\"App-header\">\n            <ul>\n              {messages.map((msg, index) => (\n                <li key={index} style={{ textAlign: msg.from === 'user' ? 'right' : 'left' }}>\n                  {msg.text}\n                </li>\n              ))}\n            </ul>\n            <input type=\"text\" onKeyDown={handleMessageInput} placeholder=\"Type a message...\" />\n          </header>\n        </div>\n        <div className=\"output-section\">\n          <h2>Backend Execution Output:</h2>\n          <pre>\n            {backendOutputs.map((output, index) => (\n              <div key={index}>{output}</div>\n            ))}\n          </pre>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}