{"ast":null,"code":"var _jsxFileName = \"/Users/chuxuanhu/Documents/Fall2023/CS598/legal-service/chat-tool/my-react-app/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [messages, setMessages] = useState([]);\n//   const [backendOutputs, setBackendOutputs] = useState([]);\n\n//   useEffect(() => {\n//     const eventSource = new EventSource('http://127.0.0.1:5000/test_stream');\n//     eventSource.onmessage = event => {\n//       console.log('Received event:', event.data);  // Ensure this logs to console\n//       setBackendOutputs(prev => [...prev, event.data]);\n//     };\n//     eventSource.onerror = error => {\n//       console.error('EventSource error:', error);\n//       eventSource.close();\n//     };\n//     return () => eventSource.close();\n//   }, []);\n\n//   const handleSendMessage = (message) => {\n//     fetch('/display_chat', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify({ input: message })\n//     })\n//     .then(response => response.json())\n//     .then(data => {\n//       data.messages.forEach((output) => {\n//         if (output.startsWith(\"**********\")) {\n//           setMessages(prev => [...prev, { text: output, from: 'bot' }]);\n//         } else {\n//           setBackendOutputs(prev => [...prev, output]);\n//         }\n//       });\n//     })\n//     .catch(error => console.error('Error:', error));\n//   };\n\n//   const handleMessageInput = event => {\n//     if (event.key === 'Enter' && event.target.value.trim() !== '') {\n//       const newMessage = event.target.value;\n//       setMessages(prev => [...prev, { text: newMessage, from: 'user' }]);\n//       handleSendMessage(newMessage);\n//       event.target.value = '';  // Clear input after sending\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <div className=\"grid-container\">\n//         <div className=\"chat-section\">\n//           <header className=\"App-header\">\n//             <ul>\n//               {messages.map((msg, index) => (\n//                 <li key={index} style={{ textAlign: msg.from === 'user' ? 'right' : 'left' }}>\n//                   {msg.text}\n//                 </li>\n//               ))}\n//             </ul>\n//             <input type=\"text\" onKeyDown={handleMessageInput} placeholder=\"Type a message...\" />\n//           </header>\n//         </div>\n//         <div className=\"output-section\">\n//           <h2>Backend Execution Output:</h2>\n//           <pre>\n//             {backendOutputs.map((output, index) => (\n//               <div key={index}>{output}</div>\n//             ))}\n//           </pre>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [backendOutputs, setBackendOutputs] = useState([]);\n  const [imageUrl, setImageUrl] = useState('');\n  const [showImage, setShowImage] = useState(false);\n  useEffect(() => {\n    // Polling mechanism to periodically check for the image\n    const interval = setInterval(() => {\n      // Update the image URL with a new timestamp to avoid cache issues\n      setImageUrl(`/static/dot_graph.png?timestamp=${new Date().getTime()}`);\n      setShowImage(true);\n    }, 5000); // Update every 5 seconds\n\n    return () => clearInterval(interval); // Cleanup on component unmount\n  }, []);\n  const handleSendMessage = message => {\n    // POST request to start the count\n    fetch('http://127.0.0.1:5000/start_count', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        message\n      })\n    }).then(() => {\n      // Establish an EventSource connection to receive the count\n      const eventSource = new EventSource('http://127.0.0.1:5000/test_stream');\n      eventSource.onmessage = event => {\n        setBackendOutputs(prev => [...prev, event.data.trim()]);\n      };\n      eventSource.onerror = error => {\n        console.error('EventSource error:', error);\n        eventSource.close();\n      };\n    }).catch(error => console.error('Error:', error));\n    setMessages(prev => [...prev, {\n      text: message,\n      from: 'user'\n    }]);\n  };\n  const handleMessageInput = event => {\n    if (event.key === 'Enter' && event.target.value.trim() !== '') {\n      handleSendMessage(event.target.value);\n      event.target.value = '';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-section\",\n        children: /*#__PURE__*/_jsxDEV(\"header\", {\n          className: \"App-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n            children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              style: {\n                textAlign: msg.from === 'user' ? 'right' : 'left'\n              },\n              children: msg.text\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            onKeyDown: handleMessageInput,\n            placeholder: \"Type a message...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"output-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Backend Execution Output:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: showImage && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: imageUrl,\n              alt: \"Dynamic from backend\",\n              onError: e => {\n                console.error('Failed to load image:', imageUrl);\n                setShowImage(false); // Hide the image if there is an error loading it\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: backendOutputs.map((output, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: output\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"yvZmAfn8x63G8MLoqex3K7c04OY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","messages","setMessages","backendOutputs","setBackendOutputs","imageUrl","setImageUrl","showImage","setShowImage","interval","setInterval","Date","getTime","clearInterval","handleSendMessage","message","fetch","method","headers","body","JSON","stringify","then","eventSource","EventSource","onmessage","event","prev","data","trim","onerror","error","console","close","catch","text","from","handleMessageInput","key","target","value","className","children","map","msg","index","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","type","onKeyDown","placeholder","src","alt","onError","e","output","_c","$RefreshReg$"],"sources":["/Users/chuxuanhu/Documents/Fall2023/CS598/legal-service/chat-tool/my-react-app/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [messages, setMessages] = useState([]);\n//   const [backendOutputs, setBackendOutputs] = useState([]);\n\n//   useEffect(() => {\n//     const eventSource = new EventSource('http://127.0.0.1:5000/test_stream');\n//     eventSource.onmessage = event => {\n//       console.log('Received event:', event.data);  // Ensure this logs to console\n//       setBackendOutputs(prev => [...prev, event.data]);\n//     };\n//     eventSource.onerror = error => {\n//       console.error('EventSource error:', error);\n//       eventSource.close();\n//     };\n//     return () => eventSource.close();\n//   }, []);\n\n//   const handleSendMessage = (message) => {\n//     fetch('/display_chat', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify({ input: message })\n//     })\n//     .then(response => response.json())\n//     .then(data => {\n//       data.messages.forEach((output) => {\n//         if (output.startsWith(\"**********\")) {\n//           setMessages(prev => [...prev, { text: output, from: 'bot' }]);\n//         } else {\n//           setBackendOutputs(prev => [...prev, output]);\n//         }\n//       });\n//     })\n//     .catch(error => console.error('Error:', error));\n//   };\n\n//   const handleMessageInput = event => {\n//     if (event.key === 'Enter' && event.target.value.trim() !== '') {\n//       const newMessage = event.target.value;\n//       setMessages(prev => [...prev, { text: newMessage, from: 'user' }]);\n//       handleSendMessage(newMessage);\n//       event.target.value = '';  // Clear input after sending\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <div className=\"grid-container\">\n//         <div className=\"chat-section\">\n//           <header className=\"App-header\">\n//             <ul>\n//               {messages.map((msg, index) => (\n//                 <li key={index} style={{ textAlign: msg.from === 'user' ? 'right' : 'left' }}>\n//                   {msg.text}\n//                 </li>\n//               ))}\n//             </ul>\n//             <input type=\"text\" onKeyDown={handleMessageInput} placeholder=\"Type a message...\" />\n//           </header>\n//         </div>\n//         <div className=\"output-section\">\n//           <h2>Backend Execution Output:</h2>\n//           <pre>\n//             {backendOutputs.map((output, index) => (\n//               <div key={index}>{output}</div>\n//             ))}\n//           </pre>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState,  useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [backendOutputs, setBackendOutputs] = useState([]);\n\n  const [imageUrl, setImageUrl] = useState('');\n  const [showImage, setShowImage] = useState(false);\n\n  useEffect(() => {\n    // Polling mechanism to periodically check for the image\n    const interval = setInterval(() => {\n      // Update the image URL with a new timestamp to avoid cache issues\n      setImageUrl(`/static/dot_graph.png?timestamp=${new Date().getTime()}`);\n      setShowImage(true); \n    }, 5000); // Update every 5 seconds\n\n    return () => clearInterval(interval); // Cleanup on component unmount\n  }, []);\n\n  const handleSendMessage = (message) => {\n    // POST request to start the count\n    fetch('http://127.0.0.1:5000/start_count', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ message })\n    })\n    .then(() => {\n      // Establish an EventSource connection to receive the count\n      const eventSource = new EventSource('http://127.0.0.1:5000/test_stream');\n      eventSource.onmessage = event => {\n        setBackendOutputs(prev => [...prev, event.data.trim()]);\n      };\n      eventSource.onerror = error => {\n        console.error('EventSource error:', error);\n        eventSource.close();\n      };\n    })\n    .catch(error => console.error('Error:', error));\n\n    setMessages(prev => [...prev, { text: message, from: 'user' }]);\n  };\n\n  const handleMessageInput = event => {\n    if (event.key === 'Enter' && event.target.value.trim() !== '') {\n      handleSendMessage(event.target.value);\n      event.target.value = '';\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"grid-container\">\n        <div className=\"chat-section\">\n          <header className=\"App-header\">\n            <ul>\n              {messages.map((msg, index) => (\n                <li key={index} style={{ textAlign: msg.from === 'user' ? 'right' : 'left' }}>\n                  {msg.text}\n                </li>\n              ))}\n            </ul>\n            <input type=\"text\" onKeyDown={handleMessageInput} placeholder=\"Type a message...\" />\n          </header>\n        </div>\n        <div className=\"output-section\">\n          <h2>Backend Execution Output:</h2>\n          <div>\n          {showImage && (\n            <div>\n              <img src={imageUrl} alt=\"Dynamic from backend\" onError={(e) => {\n                console.error('Failed to load image:', imageUrl);\n                setShowImage(false); // Hide the image if there is an error loading it\n              }} />\n            </div>\n          )}\n          </div>\n          <pre>\n            {backendOutputs.map((output, index) => (\n              <div key={index}>{output}</div>\n            ))}\n          </pre>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}